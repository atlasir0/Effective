// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (passport_series, passport_number, surname, name, patronymic, address)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING user_id, passport_series, passport_number, surname, name, patronymic, address
`

type CreateUserParams struct {
	PassportSeries string
	PassportNumber string
	Surname        string
	Name           string
	Patronymic     sql.NullString
	Address        sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.PassportSeries,
		arg.PassportNumber,
		arg.Surname,
		arg.Name,
		arg.Patronymic,
		arg.Address,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.PassportSeries,
		&i.PassportNumber,
		&i.Surname,
		&i.Name,
		&i.Patronymic,
		&i.Address,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE user_id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, userID int32) error {
	_, err := q.db.ExecContext(ctx, deleteUser, userID)
	return err
}

const getFilteredUsers = `-- name: GetFilteredUsers :many
SELECT user_id, passport_series, passport_number, surname, name, patronymic, address 
FROM users
WHERE
    CASE 
        WHEN $1 = 'surname' THEN surname
        WHEN $1 = 'name' THEN name
        WHEN $1 = 'patronymic' THEN patronymic
        WHEN $1 = 'address' THEN address
        ELSE NULL 
    END = $2
`

type GetFilteredUsersParams struct {
	Column1 interface{}
	Surname string
}

func (q *Queries) GetFilteredUsers(ctx context.Context, arg GetFilteredUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getFilteredUsers, arg.Column1, arg.Surname)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.PassportSeries,
			&i.PassportNumber,
			&i.Surname,
			&i.Name,
			&i.Patronymic,
			&i.Address,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPaginatedUsers = `-- name: GetPaginatedUsers :many
SELECT user_id, passport_series, passport_number, surname, name, patronymic, address FROM users
ORDER BY user_id
LIMIT $1 OFFSET $2
`

type GetPaginatedUsersParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetPaginatedUsers(ctx context.Context, arg GetPaginatedUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getPaginatedUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.PassportSeries,
			&i.PassportNumber,
			&i.Surname,
			&i.Name,
			&i.Patronymic,
			&i.Address,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByID = `-- name: GetUserByID :one
SELECT user_id, passport_series, passport_number, surname, name, patronymic, address FROM users
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, userID int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.PassportSeries,
		&i.PassportNumber,
		&i.Surname,
		&i.Name,
		&i.Patronymic,
		&i.Address,
	)
	return i, err
}

const getUserWorklogs = `-- name: GetUserWorklogs :many
SELECT worklog_id, user_id, title, description, start_time, end_time, hours_spent FROM worklogs
WHERE user_id = $1
ORDER BY start_time
`

func (q *Queries) GetUserWorklogs(ctx context.Context, userID int32) ([]Worklog, error) {
	rows, err := q.db.QueryContext(ctx, getUserWorklogs, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Worklog
	for rows.Next() {
		var i Worklog
		if err := rows.Scan(
			&i.WorklogID,
			&i.UserID,
			&i.Title,
			&i.Description,
			&i.StartTime,
			&i.EndTime,
			&i.HoursSpent,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsers = `-- name: GetUsers :many
SELECT user_id, passport_series, passport_number, surname, name, patronymic, address FROM users
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.PassportSeries,
			&i.PassportNumber,
			&i.Surname,
			&i.Name,
			&i.Patronymic,
			&i.Address,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const startTask = `-- name: StartTask :one
INSERT INTO worklogs (user_id, title, description, start_time)
VALUES ($1, $2, $3, NOW())
RETURNING worklog_id, user_id, title, description, start_time, end_time, hours_spent
`

type StartTaskParams struct {
	UserID      int32
	Title       string
	Description sql.NullString
}

func (q *Queries) StartTask(ctx context.Context, arg StartTaskParams) (Worklog, error) {
	row := q.db.QueryRowContext(ctx, startTask, arg.UserID, arg.Title, arg.Description)
	var i Worklog
	err := row.Scan(
		&i.WorklogID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.StartTime,
		&i.EndTime,
		&i.HoursSpent,
	)
	return i, err
}

const stopTask = `-- name: StopTask :one
UPDATE worklogs
SET end_time = NOW(), 
    hours_spent = age(NOW(), start_time)
WHERE user_id = $1 AND worklog_id = $2 AND end_time IS NULL
RETURNING worklog_id, user_id, title, description, start_time, end_time, hours_spent
`

type StopTaskParams struct {
	UserID    int32
	WorklogID int32
}

func (q *Queries) StopTask(ctx context.Context, arg StopTaskParams) (Worklog, error) {
	row := q.db.QueryRowContext(ctx, stopTask, arg.UserID, arg.WorklogID)
	var i Worklog
	err := row.Scan(
		&i.WorklogID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.StartTime,
		&i.EndTime,
		&i.HoursSpent,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET passport_series = $2, passport_number = $3, surname = $4, name = $5, patronymic = $6, address = $7
WHERE user_id = $1
RETURNING user_id, passport_series, passport_number, surname, name, patronymic, address
`

type UpdateUserParams struct {
	UserID         int32
	PassportSeries string
	PassportNumber string
	Surname        string
	Name           string
	Patronymic     sql.NullString
	Address        sql.NullString
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.UserID,
		arg.PassportSeries,
		arg.PassportNumber,
		arg.Surname,
		arg.Name,
		arg.Patronymic,
		arg.Address,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.PassportSeries,
		&i.PassportNumber,
		&i.Surname,
		&i.Name,
		&i.Patronymic,
		&i.Address,
	)
	return i, err
}
